# Git aliases
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[alias]
a   = commit --amend
br  = branch
c   = commit
ca  = !git add -A && git commit             # Commit all changes.
co  = checkout
cp  = cherry-pick
d   = diff -- . ':!*package-lock.json' ':!*yarn.lock'
dc  = diff --cached -- . ':!*package-lock.json' ':!*yarn.lock'
f   = fetch
g   = log --graph --pretty=custom           # Show custom graph.
git = !exec git                             # Allow `$ git git git...`
l   = log --pretty=custom                   # Show custom log.
lc  = shortlog --email --numbered --summary # List contributors.
p   = push
r   = rebase
s   = status
w   = instaweb --httpd=webrick              # Start web-based visualizer.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rmbranch = "!f(){ git branch -d ${1} && git push origin --delete ${1}; };f"
mkbranch = "!f(){ git checkout -b ${1} && git push origin -u ${1}; };f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

unfuck = "!f(){ git reset --hard origin/`git rev-parse --abbrev-ref HEAD`; rm -fv `git st | grep ^? | cut -d' '  -f2-`; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pull and update everything

smsa = "!f() { git submodule foreach 'git fetch origin --tags; git checkout master; git pull' && git pull && git submodule update --init --recursive; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# emojify git log

emj = "!f() { git log --oneline --color | emojify | less -r;  }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Find commits by source code.

cc = "!f() { git log --pretty=custom --decorate --date=short -S\"$1\"; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Remove the tag with the specified tag name if
# exists and tag the latest commit with that name.

retag = "!f() { git tag -d "$1" &> /dev/null; git tag $1; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Remove last commits (by default it removes the last commit).

rlc = "!f() { declare n=\"${1:-1}\"; git reset --hard \"HEAD~$n\"; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Undo last commits (by default it undoes the last commit).

ulc = "!f() { declare n=\"${1:-1}\"; git reset --soft \"HEAD~$n\"; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Find commits by commit message.

cm = "!f() { git log --pretty=custom --decorate --date=short --grep=\"$1\"; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Credit an author on the latest commit.

credit = "!f() { if [ -n \"$1\" ] && [ -n \"$2\" ]; then git commit --amend --author \"$1 <$2>\" -C HEAD; fi; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Credit a co-author on the latest commit.

credit-co-author = "!f() { if [ -n \"$1\" ] && [ -n \"$2\" ]; then GIT_EDITOR=\"git interpret-trailers --in-place --trailer='Co-authored-by: $1 <$2>'\" git commit --amend; fi; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# List remote branches.

lrb = "!f() { remote="${1:-origin}"; git ls-remote --heads "$remote"; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clone repo from github.

ghc = "!f() { git clone https://github.com/$1.git ~/Projects/github/$1; }; f"
ghr = "!f() { git remote add $1 https://github.com/$2.git; }; f"
ghm = "!f() { mkdir -p ~/Projects/github/$1 ; cd ~/Projects/github/$1 ; git init ; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clone repo from gitlab.

glc = "!f() { git clone https://gitlab.com/$1.git ~/Projects/gitlab/$1; }; f"
glr = "!f() { git remote add $1 https://gitlab.com/$2.git; }; f"
glm = "!f() { mkdir -p ~/Projects/gitlab/$1 ; cd ~/Projects/gitlab/$1  git init ; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clone repo from a private git.

gpc = "!f() { git clone https://git.casjay.in/$1.git ~/Projects/casjay/$1; }; f"
gpr = "!f() { git remote add $1 https://git.casjay.in/$2.git; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create new site from theme.

newsite = "!f() { git clone https://github.com/casjaysdev-sites/themes.casjaysdev.com ./newsite && rm -Rf ./newsite/.git && cd ./newsite && vim _config.yml ; git init && git add .; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# generate gitignore

ignore = "!f() { curl -sL https://www.gitignore.io/api/$@; }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Merge GitHub pull request on top of the current branch or,
# if a branch name is specified, on top of the specified branch.

mpr = "!f() { \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
        git fetch origin refs/pull/$1/head:pr/$1 && \
        git checkout -B $branch && \
        git rebase $branch pr/$1 && \
        git checkout -B $branch && \
        git merge pr/$1 && \
        git branch -D pr/$1 && \
        git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
    fi \
}; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

